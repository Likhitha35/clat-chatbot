# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ws1hOVsqaIDUV3z5XiF9Yv3z-Szk0suW
"""

# Install sentence-transformers for NLP chatbot
!pip install -q sentence-transformers

from sentence_transformers import SentenceTransformer, util
import numpy as np
import re

knowledge_base = {
    "clat eligibility": "No upper age limit. 45% marks in 10+2 for General/OBC/PWD/NRI/PIO/OCI, 40% for SC/ST. Candidates appearing in 2024 can apply.",
    "clat syllabus": "English, Current Affairs, Legal Reasoning, Logical Reasoning, Quantitative Techniques. 120 MCQs, 2 hours, -0.25 negative marking per wrong answer.",
    "clat english section": "Passages of around 450 words followed by comprehension, inference, summarising and vocabulary-based questions.",
    "clat exam date": "Scheduled on 3rd December, 2023 from 2 PM to 4 PM.",
    "clat universities": "Participating NLUs include NLSIU Bengaluru, NALSAR Hyderabad, NLIU Bhopal, WBNUJS Kolkata, NLU Jodhpur, and others.",
    "clat cutoffs": "Top NLUs have highest cut-offs (85-90 marks for NLSIU Bangalore in 2024). Varies by category and university.",
    "clat application fee": "Rs. 4000 for General/OBC/PWD/NRI, Rs. 3500 for SC/ST/BPL. Previous year question papers Rs. 500 extra.",
    "clat mode": "Offline pen and paper mode. 120 multiple-choice questions in 2 hours.",
    "last year nlsiu cut off": "NLSIU Bangalore cut-off in 2024 was around 89.5 for General category.",
    "how many questions in legal reasoning": "28-32 questions in Legal Reasoning section, roughly 25% of the paper.",
    "clat syllabus 2025": "Same as 2024: English, Current Affairs, Legal Reasoning, Logical Reasoning, Quantitative Techniques.",
    "nri quota admission": "Candidates for NRI/NRI-sponsored/Foreign National seats should check specific NLU e-brochures and websites for details."
}

def rule_based_chatbot(query):
    query = query.lower()
    for key in knowledge_base:
        if key in query:
            return knowledge_base[key]
    return "Sorry, I couldn’t find the exact answer. Please check the official CLAT site or rephrase your question."

# Load the sentence transformer model
model = SentenceTransformer('all-MiniLM-L6-v2')

# Prepare knowledge base sentences and embeddings
kb_questions = list(knowledge_base.keys())
kb_answers = list(knowledge_base.values())
kb_embeddings = model.encode(kb_questions)

def nlp_chatbot(query):
    query_embedding = model.encode(query)
    similarities = util.cos_sim(query_embedding, kb_embeddings)[0]
    best_match_idx = int(np.argmax(similarities))

    if similarities[best_match_idx] > 0.5:
        return kb_answers[best_match_idx]
    else:
        return "Sorry, I’m not sure about that. Try asking in a different way or check official resources."

while True:
    query = input("\nAsk me anything about CLAT (or type 'exit' to quit): ")
    if query.lower() == 'exit':
        break

    print("\n[Rule-based chatbot]")
    print(rule_based_chatbot(query))

    print("\n[NLP-powered chatbot]")
    print(nlp_chatbot(query))

